"""empty message

Revision ID: e54465f09848
Revises: 000000000000
Create Date: 2019-12-09 02:38:25.941817

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e54465f09848'
down_revision = '000000000000'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('access_groups',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('permission', sa.Enum('READ', 'WRITE', 'DELETE', name='permissiontypeenum'), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_access_groups_uuid'), 'access_groups', ['uuid'], unique=False)
    op.create_table('accessions',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.Enum('PROCESS', 'INSDC_STUDY', 'INSDC_PROJECT', 'INSDC_RUN', name='accessiontypeenum'), nullable=True),
    sa.Column('id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_accessions_uuid'), 'accessions', ['uuid'], unique=False)
    op.create_table('annotations',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.Enum(name='annotationtypeenum'), nullable=True),
    sa.Column('source', sa.Enum(name='annotationsourceenum'), nullable=True),
    sa.Column('id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_annotations_uuid'), 'annotations', ['uuid'], unique=False)
    op.create_table('barcodes',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('barcode_read', sa.Enum('READ_1', 'READ_2', 'I7_INDEX', 'I5_INDEX', name='barcodereadenum'), nullable=True),
    sa.Column('white_list_file', sa.String(), nullable=True),
    sa.Column('barcode_offset', sa.Integer(), nullable=True),
    sa.Column('barcode_length', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_barcodes_uuid'), 'barcodes', ['uuid'], unique=False)
    op.create_table('biomaterials',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('ncbi_taxon_id', sa.String(), nullable=True),
    sa.Column('biomaterial_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('genotype', sa.String(), nullable=True),
    sa.Column('body', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_biomaterials_uuid'), 'biomaterials', ['uuid'], unique=False)
    op.create_table('causes_of_death',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('cause_of_death', sa.String(), nullable=True),
    sa.Column('time_of_death', sa.DateTime(), nullable=True),
    sa.Column('cold_perfused', sa.Boolean(), nullable=True),
    sa.Column('days_on_ventilator', sa.Integer(), nullable=True),
    sa.Column('hardy_scale', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_causes_of_death_uuid'), 'causes_of_death', ['uuid'], unique=False)
    op.create_table('familial_relationships',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('parents', sa.String(), nullable=True),
    sa.Column('children', sa.String(), nullable=True),
    sa.Column('siblings', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_familial_relationships_uuid'), 'familial_relationships', ['uuid'], unique=False)
    op.create_table('files',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('format', sa.String(), nullable=True),
    sa.Column('checksum', sa.String(), nullable=True),
    sa.Column('file_description', sa.String(), nullable=True),
    sa.Column('body', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_files_uuid'), 'files', ['uuid'], unique=False)
    op.create_table('funders',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('grant_id', sa.String(), nullable=True),
    sa.Column('organization', sa.String(), nullable=True),
    sa.Column('grant_title', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_funders_uuid'), 'funders', ['uuid'], unique=False)
    op.create_table('growth_conditions',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('passage_number', sa.Integer(), nullable=True),
    sa.Column('growth_medium', sa.String(), nullable=True),
    sa.Column('culture_environment', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_growth_conditions_uuid'), 'growth_conditions', ['uuid'], unique=False)
    op.create_table('links',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_links_uuid'), 'links', ['uuid'], unique=False)
    op.create_table('medical_histories',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('nutritional_state', sa.Enum('NORMAL', 'FASTING', 'FT_REMOVED', name='nutritionalstateenum'), nullable=True),
    sa.Column('alcohol_history', sa.String(), nullable=True),
    sa.Column('medication', sa.String(), nullable=True),
    sa.Column('smoking_history', sa.String(), nullable=True),
    sa.Column('test_results', sa.String(), nullable=True),
    sa.Column('treatment', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_medical_histories_uuid'), 'medical_histories', ['uuid'], unique=False)
    op.create_table('ontologies',
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('ontology', sa.String(), nullable=False),
    sa.Column('ontology_label', sa.String(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('ontology')
    )
    op.create_index(op.f('ix_ontologies_ontology'), 'ontologies', ['ontology'], unique=True)
    op.create_table('parameters',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('checksum', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_parameters_uuid'), 'parameters', ['uuid'], unique=False)
    op.create_table('plate_based_sequencing',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('plate_label', sa.String(), nullable=True),
    sa.Column('well_label', sa.String(), nullable=True),
    sa.Column('well_quality', sa.Enum('OK', 'CONTROL_2C', 'CONTROL_EMPTY', 'LOW_QUALITY_CELL', name='wellqualityenum'), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_plate_based_sequencing_uuid'), 'plate_based_sequencing', ['uuid'], unique=False)
    op.create_table('projects',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('short_name', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('body', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_projects_short_name'), 'projects', ['short_name'], unique=False)
    op.create_index(op.f('ix_projects_title'), 'projects', ['title'], unique=False)
    op.create_index(op.f('ix_projects_uuid'), 'projects', ['uuid'], unique=False)
    op.create_table('reagents',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('retail_name', sa.String(), nullable=True),
    sa.Column('catalog_number', sa.String(), nullable=True),
    sa.Column('manufacturer', sa.String(), nullable=True),
    sa.Column('lot_number', sa.String(), nullable=True),
    sa.Column('kit_titer', sa.String(), nullable=True),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_reagents_uuid'), 'reagents', ['uuid'], unique=False)
    op.create_table('tasks',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('docker_image', sa.String(), nullable=True),
    sa.Column('disk_size', sa.String(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('stop_time', sa.DateTime(), nullable=True),
    sa.Column('memory', sa.String(), nullable=True),
    sa.Column('zone', sa.String(), nullable=True),
    sa.Column('log_err', sa.String(), nullable=True),
    sa.Column('log_out', sa.String(), nullable=True),
    sa.Column('cpus', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_tasks_uuid'), 'tasks', ['uuid'], unique=False)
    op.create_table('ten_x',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('fastq_method', sa.String(), nullable=True),
    sa.Column('fastq_method_version', sa.String(), nullable=True),
    sa.Column('drop_uniformity', sa.Boolean(), nullable=True),
    sa.Column('pooled_channels', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_ten_x_uuid'), 'ten_x', ['uuid'], unique=False)
    op.create_table('users',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('orcid_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=False)
    op.create_table('biomaterial_accession_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('accession_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('biomaterial_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['accession_uuid'], ['accessions.uuid'], ),
    sa.ForeignKeyConstraint(['biomaterial_uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'accession_uuid', 'biomaterial_uuid')
    )
    op.create_index(op.f('ix_biomaterial_accession_join_table_uuid'), 'biomaterial_accession_join_table', ['uuid'], unique=False)
    op.create_table('cell_morphologies',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('cell_morphology', sa.String(), nullable=True),
    sa.Column('cell_viability_method', sa.String(), nullable=True),
    sa.Column('cell_viability_result', sa.String(), nullable=True),
    sa.Column('cell_size', sa.Integer(), nullable=True),
    sa.Column('percent_cell_viability', sa.Integer(), nullable=True),
    sa.Column('percent_necrosis', sa.Integer(), nullable=True),
    sa.Column('cell_size_unit_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cell_size_unit_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_cell_morphologies_uuid'), 'cell_morphologies', ['uuid'], unique=False)
    op.create_table('contributors',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('institution', sa.String(), nullable=True),
    sa.Column('lab', sa.String(), nullable=True),
    sa.Column('corresponding_contributor', sa.Boolean(), nullable=True),
    sa.Column('project_role_id', sa.String(), nullable=True),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['project_role_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_contributors_uuid'), 'contributors', ['uuid'], unique=False)
    op.create_table('disease_ontologies',
    sa.Column('ontology', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['ontology'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('ontology')
    )
    op.create_table('features',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('feature_start', sa.String(), nullable=True),
    sa.Column('feature_end', sa.String(), nullable=True),
    sa.Column('chromosome', sa.Integer(), nullable=True),
    sa.Column('is_gene', sa.Boolean(), nullable=True),
    sa.Column('genus_species_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['genus_species_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_features_uuid'), 'features', ['uuid'], unique=False)
    op.create_table('file_ontology_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('file_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('ontology_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['file_uuid'], ['files.uuid'], ),
    sa.ForeignKeyConstraint(['ontology_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid', 'file_uuid', 'ontology_id')
    )
    op.create_index(op.f('ix_file_ontology_join_table_uuid'), 'file_ontology_join_table', ['uuid'], unique=False)
    op.create_table('organoid',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('age_unit_id', sa.String(), nullable=True),
    sa.Column('model_organ_id', sa.String(), nullable=True),
    sa.Column('genus_species_id', sa.String(), nullable=True),
    sa.Column('model_organ_part_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['age_unit_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['genus_species_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['model_organ_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['model_organ_part_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('preservation_storage',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('storage_method', sa.Enum('AMBIENT', 'CUT_SLIDE', 'FRESH', 'FROZEN_NEG_70C', 'FROZEN_NEG_80C', 'FROZEN_NEG_150C', 'LIQUID_NITROGEN', 'FROZEN_VAPOR_PHASE', 'PARAFFIN', 'FNALATER_4C', 'RNALATER_25C', 'RNALATER_NEG_20C', name='storagemethodenum'), nullable=True),
    sa.Column('preservation_method', sa.Enum('CRYO_LN_DT', 'CRTO_DI_DT', 'CRYO_LN_LC', 'CRYO_OTHER', 'FORMALIN_UNBUFF', 'FORMALON_BUFF', 'FROMALIN_PARAFFIN', 'HYPOTHERMIC_2_to_8C', 'FRESH', name='preservationmethodenum'), nullable=True),
    sa.Column('storage_time', sa.Integer(), nullable=True),
    sa.Column('storage_time_unit_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['storage_time_unit_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_preservation_storage_uuid'), 'preservation_storage', ['uuid'], unique=False)
    op.create_table('processes',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('analysis_run_type', sa.Enum('RUN', 'COPY_FORWARD', name='analysisruntypeenum'), nullable=True),
    sa.Column('body', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('input_bundle', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('deviation_from_protocol', sa.String(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('analysis', sa.Boolean(), nullable=True),
    sa.Column('analysis_type', sa.String(), nullable=True),
    sa.Column('accession_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('type_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['accession_uuid'], ['accessions.uuid'], ),
    sa.ForeignKeyConstraint(['type_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_processes_uuid'), 'processes', ['uuid'], unique=False)
    op.create_table('project_access_group_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('access_group_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['access_group_uuid'], ['access_groups.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'access_group_uuid')
    )
    op.create_index(op.f('ix_project_access_group_join_table_uuid'), 'project_access_group_join_table', ['uuid'], unique=False)
    op.create_table('project_accession_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('accessions_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['accessions_uuid'], ['accessions.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'accessions_uuid')
    )
    op.create_index(op.f('ix_project_accession_join_table_uuid'), 'project_accession_join_table', ['uuid'], unique=False)
    op.create_table('project_funder_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('funder_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['funder_uuid'], ['funders.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'funder_uuid')
    )
    op.create_index(op.f('ix_project_funder_join_table_uuid'), 'project_funder_join_table', ['uuid'], unique=False)
    op.create_table('project_link_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('link_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['link_uuid'], ['links.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'link_uuid')
    )
    op.create_index(op.f('ix_project_link_join_table_uuid'), 'project_link_join_table', ['uuid'], unique=False)
    op.create_table('protocols',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('protocol_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('publication_doi', sa.String(), nullable=True),
    sa.Column('protocols_io_doi', sa.String(), nullable=True),
    sa.Column('body', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('method_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['method_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_protocols_uuid'), 'protocols', ['uuid'], unique=False)
    op.create_table('publications',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('authors', sa.String(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('doi', sa.Integer(), nullable=True),
    sa.Column('url_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['url_uuid'], ['links.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_publications_uuid'), 'publications', ['uuid'], unique=False)
    op.create_table('sequence_files',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('read_index', sa.Enum('READ_1', 'READ_2', 'INDEX_1', 'INDEX_2', 'SINGLE_ENDED_NON_INDEXED', name='readindexenum'), nullable=True),
    sa.Column('libary_prep_id', sa.String(), nullable=True),
    sa.Column('lane_index', sa.Integer(), nullable=True),
    sa.Column('read_length', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['uuid'], ['files.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('time_courses',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('relevance', sa.String(), nullable=True),
    sa.Column('unit_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['unit_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_time_courses_uuid'), 'time_courses', ['uuid'], unique=False)
    op.create_table('user_access_group_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('access_group_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['access_group_uuid'], ['access_groups.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'user_uuid', 'access_group_uuid')
    )
    op.create_index(op.f('ix_user_access_group_join_table_uuid'), 'user_access_group_join_table', ['uuid'], unique=False)
    op.create_table('analysis_protocols',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('computational_method', sa.String(), nullable=True),
    sa.Column('type_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['type_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('cell_lines',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('type', sa.Enum('PRIMARY', 'IMMORTALIZED', 'STEM_CELL', 'STEM_CELL_DERIVED', 'INDUCED_PLURIPOTENT', 'SYNTHETIC', name='celllinetypeenum'), nullable=True),
    sa.Column('cell_morphology_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('growth_condition_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('time_course_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cell_type_id', sa.String(), nullable=True),
    sa.Column('model_organ_id', sa.String(), nullable=True),
    sa.Column('cell_cycle_id', sa.String(), nullable=True),
    sa.Column('tissue_id', sa.String(), nullable=True),
    sa.Column('disease_id', sa.String(), nullable=True),
    sa.Column('genus_species_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cell_cycle_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['cell_morphology_uuid'], ['cell_morphologies.uuid'], ),
    sa.ForeignKeyConstraint(['cell_type_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['disease_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['genus_species_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['growth_condition_uuid'], ['growth_conditions.uuid'], ),
    sa.ForeignKeyConstraint(['model_organ_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['time_course_uuid'], ['time_courses.uuid'], ),
    sa.ForeignKeyConstraint(['tissue_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('cell_suspensions',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('estimated_cell_count', sa.Integer(), nullable=True),
    sa.Column('growth_condition_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cell_morphology_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('genus_species_id', sa.String(), nullable=True),
    sa.Column('plate_based_sequencing_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('time_course_uuid', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['cell_morphology_uuid'], ['cell_morphologies.uuid'], ),
    sa.ForeignKeyConstraint(['genus_species_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['growth_condition_uuid'], ['growth_conditions.uuid'], ),
    sa.ForeignKeyConstraint(['plate_based_sequencing_uuid'], ['plate_based_sequencing.uuid'], ),
    sa.ForeignKeyConstraint(['time_course_uuid'], ['time_courses.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('collection_protocols',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('differentiation_protocol',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('media', sa.String(), nullable=True),
    sa.Column('small_molecules', sa.String(), nullable=True),
    sa.Column('target_pathway', sa.String(), nullable=True),
    sa.Column('validation_method', sa.String(), nullable=True),
    sa.Column('validation_result', sa.String(), nullable=True),
    sa.Column('target_cell_yield', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('dissociation_protocols',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('donor_organism',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('is_living', sa.Enum('YES', 'NO', 'UNKNOWN', 'NOT_APPLICABLE', name='islivingenum'), nullable=True),
    sa.Column('sex', sa.Enum('FEMALE', 'MALE', 'MIXED', 'UNKNOWN', name='sexenum'), nullable=True),
    sa.Column('bmi', sa.Integer(), nullable=True),
    sa.Column('organism_age', sa.Integer(), nullable=True),
    sa.Column('cause_of_death_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('familial_relationship_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('medical_history_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('time_course_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('development_stage_id', sa.String(), nullable=True),
    sa.Column('strain_id', sa.String(), nullable=True),
    sa.Column('ethnicity_id', sa.String(), nullable=True),
    sa.Column('genus_species_id', sa.String(), nullable=True),
    sa.Column('organism_age_unit_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cause_of_death_uuid'], ['causes_of_death.uuid'], ),
    sa.ForeignKeyConstraint(['development_stage_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['ethnicity_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['familial_relationship_uuid'], ['familial_relationships.uuid'], ),
    sa.ForeignKeyConstraint(['genus_species_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['medical_history_uuid'], ['medical_histories.uuid'], ),
    sa.ForeignKeyConstraint(['organism_age_unit_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['strain_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['time_course_uuid'], ['time_courses.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('enrichment_protocols',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('markers', sa.String(), nullable=True),
    sa.Column('minimum_size', sa.Integer(), nullable=True),
    sa.Column('maximum_size', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('ipsc_induction_protocols',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('ispc_method', sa.Enum('LENTIVIRUS', 'SENDAI_VIRUS', 'GUN_PARTICLE', 'PB_TRANS', 'MIRNA_VIRAL', 'ADENOVIRUS', 'CRE_LOXP', 'PLASMID', 'RETROVIRAL', name='ispcmethodenum'), nullable=True),
    sa.Column('reprogramming_factors', sa.String(), nullable=True),
    sa.Column('pluripotency_test', sa.String(), nullable=True),
    sa.Column('percent_pluripotency', sa.Integer(), nullable=True),
    sa.Column('ipsc_induction_kit_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('pluripotency_vector_removed', sa.Enum('YES', 'NO', 'UNKONWN', name='vectorremovalenum'), nullable=True),
    sa.ForeignKeyConstraint(['ipsc_induction_kit_uuid'], ['reagents.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('library_prep_protocols',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('nucleic_acid_source', sa.String(), nullable=True),
    sa.Column('end_bias', sa.String(), nullable=True),
    sa.Column('strand', sa.String(), nullable=True),
    sa.Column('primer', sa.String(), nullable=True),
    sa.Column('spike_in_dilution', sa.Integer(), nullable=True),
    sa.Column('nominal_length', sa.Integer(), nullable=True),
    sa.Column('nominal_sdev', sa.Integer(), nullable=True),
    sa.Column('cell_barcode_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('umi_barcode_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('library_construction_kit_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('nucleic_acid_conversion_kit_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('spike_in_kit_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cdna_library_amplification_method_id', sa.String(), nullable=True),
    sa.Column('library_preamplification_method_id', sa.String(), nullable=True),
    sa.Column('library_construction_method_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['cdna_library_amplification_method_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['cell_barcode_uuid'], ['barcodes.uuid'], ),
    sa.ForeignKeyConstraint(['library_construction_kit_uuid'], ['reagents.uuid'], ),
    sa.ForeignKeyConstraint(['library_construction_method_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['library_preamplification_method_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['nucleic_acid_conversion_kit_uuid'], ['reagents.uuid'], ),
    sa.ForeignKeyConstraint(['spike_in_kit_uuid'], ['reagents.uuid'], ),
    sa.ForeignKeyConstraint(['umi_barcode_uuid'], ['barcodes.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('process_biomaterial_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('connection_type', sa.Enum('INPUT', 'OUTPUT', 'PROTOCOL', name='processconnectiontypeenum'), nullable=True),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('biomaterial_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['biomaterial_uuid'], ['biomaterials.uuid'], ),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'process_uuid', 'biomaterial_uuid')
    )
    op.create_index(op.f('ix_process_biomaterial_join_table_uuid'), 'process_biomaterial_join_table', ['uuid'], unique=False)
    op.create_table('process_file_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('connection_type', sa.Enum('INPUT', 'OUTPUT', 'PROTOCOL', name='processconnectiontypeenum'), nullable=True),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('file_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['file_uuid'], ['files.uuid'], ),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'process_uuid', 'file_uuid')
    )
    op.create_index(op.f('ix_process_file_join_table_uuid'), 'process_file_join_table', ['uuid'], unique=False)
    op.create_table('process_parameter_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('parameter_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['parameter_uuid'], ['parameters.uuid'], ),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'process_uuid', 'parameter_uuid')
    )
    op.create_index(op.f('ix_process_parameter_join_table_uuid'), 'process_parameter_join_table', ['uuid'], unique=False)
    op.create_table('process_project_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'process_uuid', 'project_uuid')
    )
    op.create_index(op.f('ix_process_project_join_table_uuid'), 'process_project_join_table', ['uuid'], unique=False)
    op.create_table('process_protocol_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('connection_type', sa.Enum('INPUT', 'OUTPUT', 'PROTOCOL', name='processconnectiontypeenum'), nullable=True),
    sa.Column('protocol_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.ForeignKeyConstraint(['protocol_uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'protocol_uuid', 'process_uuid')
    )
    op.create_index(op.f('ix_process_protocol_join_table_uuid'), 'process_protocol_join_table', ['uuid'], unique=False)
    op.create_table('process_self_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('parent_process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('child_process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['child_process_uuid'], ['processes.uuid'], ),
    sa.ForeignKeyConstraint(['parent_process_uuid'], ['processes.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'parent_process_uuid', 'child_process_uuid')
    )
    op.create_index(op.f('ix_process_self_join_table_uuid'), 'process_self_join_table', ['uuid'], unique=False)
    op.create_table('process_task_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('task_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.ForeignKeyConstraint(['task_uuid'], ['tasks.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'process_uuid', 'task_uuid')
    )
    op.create_index(op.f('ix_process_task_join_table_uuid'), 'process_task_join_table', ['uuid'], unique=False)
    op.create_table('project_contributor_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('contributor_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['contributor_uuid'], ['contributors.uuid'], ),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'contributor_uuid')
    )
    op.create_index(op.f('ix_project_contributor_join_table_uuid'), 'project_contributor_join_table', ['uuid'], unique=False)
    op.create_table('project_publication_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('project_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('publication_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['project_uuid'], ['projects.uuid'], ),
    sa.ForeignKeyConstraint(['publication_uuid'], ['publications.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'project_uuid', 'publication_uuid')
    )
    op.create_index(op.f('ix_project_publication_join_table_uuid'), 'project_publication_join_table', ['uuid'], unique=False)
    op.create_table('protocol_reagent_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('protocol_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('reagent_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['protocol_uuid'], ['protocols.uuid'], ),
    sa.ForeignKeyConstraint(['reagent_uuid'], ['reagents.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'protocol_uuid', 'reagent_uuid')
    )
    op.create_index(op.f('ix_protocol_reagent_join_table_uuid'), 'protocol_reagent_join_table', ['uuid'], unique=False)
    op.create_table('sequence_file_accession_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('sequence_file_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('accession_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['accession_uuid'], ['accessions.uuid'], ),
    sa.ForeignKeyConstraint(['sequence_file_uuid'], ['sequence_files.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'sequence_file_uuid', 'accession_uuid')
    )
    op.create_index(op.f('ix_sequence_file_accession_join_table_uuid'), 'sequence_file_accession_join_table', ['uuid'], unique=False)
    op.create_table('sequencing_protocols',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('local_machine_name', sa.String(), nullable=True),
    sa.Column('paired_end', sa.Boolean(), nullable=True),
    sa.Column('ten_x_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('instrument_manufacturer_model_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['instrument_manufacturer_model_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['ten_x_uuid'], ['ten_x.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['protocols.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('specimens',
    sa.Column('uuid', postgresql.UUID(), nullable=False),
    sa.Column('collection_time', sa.DateTime(), nullable=True),
    sa.Column('organ_id', sa.String(), nullable=True),
    sa.Column('genus_sepcies_id', sa.String(), nullable=True),
    sa.Column('organ_parts_id', sa.String(), nullable=True),
    sa.Column('preservation_storage_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['genus_sepcies_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['organ_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['organ_parts_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['preservation_storage_uuid'], ['preservation_storage.uuid'], ),
    sa.ForeignKeyConstraint(['uuid'], ['biomaterials.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('cell_line_publication_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('cell_line_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('publication_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['cell_line_uuid'], ['cell_lines.uuid'], ),
    sa.ForeignKeyConstraint(['publication_uuid'], ['publications.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'cell_line_uuid', 'publication_uuid')
    )
    op.create_index(op.f('ix_cell_line_publication_join_table_uuid'), 'cell_line_publication_join_table', ['uuid'], unique=False)
    op.create_table('cell_suspension_cell_type_ontology_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('cell_suspension_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('cell_type_ontology_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['cell_suspension_uuid'], ['cell_suspensions.uuid'], ),
    sa.ForeignKeyConstraint(['cell_type_ontology_id'], ['ontologies.ontology'], ),
    sa.PrimaryKeyConstraint('uuid', 'cell_suspension_uuid', 'cell_type_ontology_id')
    )
    op.create_index(op.f('ix_cell_suspension_cell_type_ontology_join_table_uuid'), 'cell_suspension_cell_type_ontology_join_table', ['uuid'], unique=False)
    op.create_table('cells',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('genes_detected', sa.Integer(), nullable=True),
    sa.Column('total_umis', sa.Integer(), nullable=True),
    sa.Column('empty_drops_is_cell', sa.Boolean(), nullable=True),
    sa.Column('barcode_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('sequence_file_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cell_suspension_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['barcode_uuid'], ['barcodes.uuid'], ),
    sa.ForeignKeyConstraint(['cell_suspension_uuid'], ['cell_suspensions.uuid'], ),
    sa.ForeignKeyConstraint(['sequence_file_uuid'], ['sequence_files.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_cells_uuid'), 'cells', ['uuid'], unique=False)
    op.create_table('donor_organism_disease_ontology_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('donor_organism_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('disease_ontology_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['disease_ontology_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['donor_organism_uuid'], ['donor_organism.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'donor_organism_uuid', 'disease_ontology_id')
    )
    op.create_index(op.f('ix_donor_organism_disease_ontology_join_table_uuid'), 'donor_organism_disease_ontology_join_table', ['uuid'], unique=False)
    op.create_table('specimen_disease_ontology_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('specimen_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('disease_ontology_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['disease_ontology_id'], ['ontologies.ontology'], ),
    sa.ForeignKeyConstraint(['specimen_uuid'], ['specimens.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'specimen_uuid', 'disease_ontology_id')
    )
    op.create_index(op.f('ix_specimen_disease_ontology_join_table_uuid'), 'specimen_disease_ontology_join_table', ['uuid'], unique=False)
    op.create_table('expressions',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('expr_type', sa.String(), nullable=True),
    sa.Column('expr_value', sa.Integer(), nullable=True),
    sa.Column('cell_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('feature_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['cell_uuid'], ['cells.uuid'], ),
    sa.ForeignKeyConstraint(['feature_uuid'], ['features.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'cell_uuid', 'feature_uuid')
    )
    op.create_index(op.f('ix_expressions_uuid'), 'expressions', ['uuid'], unique=False)
    op.create_table('process_cell_join_table',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('connection_type', sa.Enum('INPUT', 'OUTPUT', 'PROTOCOL', name='processconnectiontypeenum'), nullable=True),
    sa.Column('cell_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('process_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['cell_uuid'], ['cells.uuid'], ),
    sa.ForeignKeyConstraint(['process_uuid'], ['processes.uuid'], ),
    sa.PrimaryKeyConstraint('uuid', 'cell_uuid', 'process_uuid')
    )
    op.create_index(op.f('ix_process_cell_join_table_uuid'), 'process_cell_join_table', ['uuid'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_process_cell_join_table_uuid'), table_name='process_cell_join_table')
    op.drop_table('process_cell_join_table')
    op.drop_index(op.f('ix_expressions_uuid'), table_name='expressions')
    op.drop_table('expressions')
    op.drop_index(op.f('ix_specimen_disease_ontology_join_table_uuid'), table_name='specimen_disease_ontology_join_table')
    op.drop_table('specimen_disease_ontology_join_table')
    op.drop_index(op.f('ix_donor_organism_disease_ontology_join_table_uuid'), table_name='donor_organism_disease_ontology_join_table')
    op.drop_table('donor_organism_disease_ontology_join_table')
    op.drop_index(op.f('ix_cells_uuid'), table_name='cells')
    op.drop_table('cells')
    op.drop_index(op.f('ix_cell_suspension_cell_type_ontology_join_table_uuid'), table_name='cell_suspension_cell_type_ontology_join_table')
    op.drop_table('cell_suspension_cell_type_ontology_join_table')
    op.drop_index(op.f('ix_cell_line_publication_join_table_uuid'), table_name='cell_line_publication_join_table')
    op.drop_table('cell_line_publication_join_table')
    op.drop_table('specimens')
    op.drop_table('sequencing_protocols')
    op.drop_index(op.f('ix_sequence_file_accession_join_table_uuid'), table_name='sequence_file_accession_join_table')
    op.drop_table('sequence_file_accession_join_table')
    op.drop_index(op.f('ix_protocol_reagent_join_table_uuid'), table_name='protocol_reagent_join_table')
    op.drop_table('protocol_reagent_join_table')
    op.drop_index(op.f('ix_project_publication_join_table_uuid'), table_name='project_publication_join_table')
    op.drop_table('project_publication_join_table')
    op.drop_index(op.f('ix_project_contributor_join_table_uuid'), table_name='project_contributor_join_table')
    op.drop_table('project_contributor_join_table')
    op.drop_index(op.f('ix_process_task_join_table_uuid'), table_name='process_task_join_table')
    op.drop_table('process_task_join_table')
    op.drop_index(op.f('ix_process_self_join_table_uuid'), table_name='process_self_join_table')
    op.drop_table('process_self_join_table')
    op.drop_index(op.f('ix_process_protocol_join_table_uuid'), table_name='process_protocol_join_table')
    op.drop_table('process_protocol_join_table')
    op.drop_index(op.f('ix_process_project_join_table_uuid'), table_name='process_project_join_table')
    op.drop_table('process_project_join_table')
    op.drop_index(op.f('ix_process_parameter_join_table_uuid'), table_name='process_parameter_join_table')
    op.drop_table('process_parameter_join_table')
    op.drop_index(op.f('ix_process_file_join_table_uuid'), table_name='process_file_join_table')
    op.drop_table('process_file_join_table')
    op.drop_index(op.f('ix_process_biomaterial_join_table_uuid'), table_name='process_biomaterial_join_table')
    op.drop_table('process_biomaterial_join_table')
    op.drop_table('library_prep_protocols')
    op.drop_table('ipsc_induction_protocols')
    op.drop_table('enrichment_protocols')
    op.drop_table('donor_organism')
    op.drop_table('dissociation_protocols')
    op.drop_table('differentiation_protocol')
    op.drop_table('collection_protocols')
    op.drop_table('cell_suspensions')
    op.drop_table('cell_lines')
    op.drop_table('analysis_protocols')
    op.drop_index(op.f('ix_user_access_group_join_table_uuid'), table_name='user_access_group_join_table')
    op.drop_table('user_access_group_join_table')
    op.drop_index(op.f('ix_time_courses_uuid'), table_name='time_courses')
    op.drop_table('time_courses')
    op.drop_table('sequence_files')
    op.drop_index(op.f('ix_publications_uuid'), table_name='publications')
    op.drop_table('publications')
    op.drop_index(op.f('ix_protocols_uuid'), table_name='protocols')
    op.drop_table('protocols')
    op.drop_index(op.f('ix_project_link_join_table_uuid'), table_name='project_link_join_table')
    op.drop_table('project_link_join_table')
    op.drop_index(op.f('ix_project_funder_join_table_uuid'), table_name='project_funder_join_table')
    op.drop_table('project_funder_join_table')
    op.drop_index(op.f('ix_project_accession_join_table_uuid'), table_name='project_accession_join_table')
    op.drop_table('project_accession_join_table')
    op.drop_index(op.f('ix_project_access_group_join_table_uuid'), table_name='project_access_group_join_table')
    op.drop_table('project_access_group_join_table')
    op.drop_index(op.f('ix_processes_uuid'), table_name='processes')
    op.drop_table('processes')
    op.drop_index(op.f('ix_preservation_storage_uuid'), table_name='preservation_storage')
    op.drop_table('preservation_storage')
    op.drop_table('organoid')
    op.drop_index(op.f('ix_file_ontology_join_table_uuid'), table_name='file_ontology_join_table')
    op.drop_table('file_ontology_join_table')
    op.drop_index(op.f('ix_features_uuid'), table_name='features')
    op.drop_table('features')
    op.drop_table('disease_ontologies')
    op.drop_index(op.f('ix_contributors_uuid'), table_name='contributors')
    op.drop_table('contributors')
    op.drop_index(op.f('ix_cell_morphologies_uuid'), table_name='cell_morphologies')
    op.drop_table('cell_morphologies')
    op.drop_index(op.f('ix_biomaterial_accession_join_table_uuid'), table_name='biomaterial_accession_join_table')
    op.drop_table('biomaterial_accession_join_table')
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_ten_x_uuid'), table_name='ten_x')
    op.drop_table('ten_x')
    op.drop_index(op.f('ix_tasks_uuid'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_reagents_uuid'), table_name='reagents')
    op.drop_table('reagents')
    op.drop_index(op.f('ix_projects_uuid'), table_name='projects')
    op.drop_index(op.f('ix_projects_title'), table_name='projects')
    op.drop_index(op.f('ix_projects_short_name'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_plate_based_sequencing_uuid'), table_name='plate_based_sequencing')
    op.drop_table('plate_based_sequencing')
    op.drop_index(op.f('ix_parameters_uuid'), table_name='parameters')
    op.drop_table('parameters')
    op.drop_index(op.f('ix_ontologies_ontology'), table_name='ontologies')
    op.drop_table('ontologies')
    op.drop_index(op.f('ix_medical_histories_uuid'), table_name='medical_histories')
    op.drop_table('medical_histories')
    op.drop_index(op.f('ix_links_uuid'), table_name='links')
    op.drop_table('links')
    op.drop_index(op.f('ix_growth_conditions_uuid'), table_name='growth_conditions')
    op.drop_table('growth_conditions')
    op.drop_index(op.f('ix_funders_uuid'), table_name='funders')
    op.drop_table('funders')
    op.drop_index(op.f('ix_files_uuid'), table_name='files')
    op.drop_table('files')
    op.drop_index(op.f('ix_familial_relationships_uuid'), table_name='familial_relationships')
    op.drop_table('familial_relationships')
    op.drop_index(op.f('ix_causes_of_death_uuid'), table_name='causes_of_death')
    op.drop_table('causes_of_death')
    op.drop_index(op.f('ix_biomaterials_uuid'), table_name='biomaterials')
    op.drop_table('biomaterials')
    op.drop_index(op.f('ix_barcodes_uuid'), table_name='barcodes')
    op.drop_table('barcodes')
    op.drop_index(op.f('ix_annotations_uuid'), table_name='annotations')
    op.drop_table('annotations')
    op.drop_index(op.f('ix_accessions_uuid'), table_name='accessions')
    op.drop_table('accessions')
    op.drop_index(op.f('ix_access_groups_uuid'), table_name='access_groups')
    op.drop_table('access_groups')
    # ### end Alembic commands ###
